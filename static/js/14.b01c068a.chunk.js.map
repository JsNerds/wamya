{"version":3,"sources":["components/back/DeliveryDetails.js","pages/back/Delivery.js"],"names":["DeliveryDetails","props","MyMarkers","map","useMap","deliv","preparedData","push","L","sourceAddress","Location","Latitude","Longitude","destinationAddress","forEach","el","control","waypoints","lineOptions","styles","color","opacity","weight","addWaypoints","draggableWaypoints","fitSelectedRoutes","showAlternatives","addTo","panTo","Marker","position","Popup","City","Grid","container","spacing","item","xs","sm","md","Card","className","CardContent","package","type","customer","FirstName","LastName","PhoneNumber","lg","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Delivery","id","useParams","useServerApi","delivery","toRender","titleHeading","titleDescription","sectionHeading"],"mappings":"uRAce,SAASA,EAAgBC,GAAQ,IAAD,UACrCC,EAAY,WACd,IAAMC,EAAMC,cAEZ,GAAIH,EAAMI,MAAO,CAAC,IAAD,cACTC,EAAe,GAqCrB,OApCAA,EAAaC,KACXC,SAAA,UACEP,EAAMI,aADR,aACE,EAAaI,cAAcC,SAASC,SADtC,UAEEV,EAAMI,aAFR,aAEE,EAAaI,cAAcC,SAASE,YAGxCX,EAAMI,MAAMQ,mBAAmBC,SAAQ,SAACC,GACtCT,EAAaC,KACXC,SAASO,EAAGL,SAASC,SAAUI,EAAGL,SAASE,eAIjCJ,UAAUQ,QAAQ,CAC9BC,UAAWX,EAEXY,YAAa,CACXC,OAAQ,CACN,CACEC,MAAO,OACPC,QAAS,GACTC,OAAQ,KAIdC,cAAc,EACdC,oBAAoB,EACpBC,mBAAmB,EACnBC,kBAAkB,IAGZC,MAAMxB,GAEdA,EAAIyB,MAAM,WACR3B,EAAMI,aADE,aACR,EAAaI,cAAcC,SAASC,SAD5B,UAERV,EAAMI,aAFE,aAER,EAAaI,cAAcC,SAASE,YAGpC,oCACE,kBAACiB,EAAA,EAAD,CACEC,SAAU,WACR7B,EAAMI,aADE,aACR,EAAaI,cAAcC,SAASC,SAD5B,UAERV,EAAMI,aAFE,aAER,EAAaI,cAAcC,SAASE,YAGtC,kBAACmB,EAAA,EAAD,KACE,mDAAe9B,EAAMI,aAArB,aAAe,EAAaI,cAAcuB,SAMlD,OAAO,MAIb,OACI,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACZ,kBAACC,EAAA,EAAD,CAAaD,UAAU,OACnB,wBAAIA,UAAU,6CAGd,uBAAGA,UAAU,aACT,4DAAwBxC,EAAMI,aAA9B,aAAwB,EAAasC,QAAQ,GAAGC,OAEpD,uBAAGH,UAAU,aAAb,YAEI,yDAAqBxC,EAAMI,aAA3B,aAAqB,EAAawC,SAASC,UAA3C,cAAuD7C,EAAMI,aAA7D,aAAuD,EAAawC,SAASE,UAC7E,mDAHJ,cAGsC9C,EAAMI,aAH5C,aAGsC,EAAawC,SAASG,aAE5D,uBAAGP,UAAU,aACT,4DAAwBxC,EAAMI,aAA9B,aAAwB,EAAasC,QAAQ,GAAGC,UAMhE,kBAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIY,GAAI,GACvB,kBAACC,EAAA,EAAD,CAAcC,OAAQ,CAAC,EAAE,GAAIC,KAAM,GAAIC,iBAAiB,GACtD,kBAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,kBAACtD,EAAD,U,YCnGH,SAASuD,IAAY,IACzBC,EAAMC,cAAND,GADwB,EAECE,YAAa,YAAYF,GAF1B,mBAExBG,EAFwB,KAGzBC,GAHyB,UAGdD,GACjB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CACIE,aAAa,WACbC,iBAAiB,gEAErB,kBAAC,IAAD,CAAwBC,eAAe,kBACtCH,EACK,oCACE,kBAAC9D,EAAD,CAAiBK,MAAOyD,KAEzB,mD","file":"static/js/14.b01c068a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport {Grid, Card, CardContent, Button, List, ListItem, LinearProgress} from '@material-ui/core';\r\nimport * as L from \"leaflet\";\r\nimport {\r\n    MapContainer,\r\n    TileLayer,\r\n    Marker,\r\n    Popup,\r\n    // useMapEvents,\r\n    useMap,\r\n  } from \"react-leaflet\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function DeliveryDetails(props) {\r\n    const MyMarkers = () => {\r\n        const map = useMap();\r\n    \r\n        if (props.deliv) {\r\n          const preparedData = [];\r\n          preparedData.push(\r\n            L.latLng(\r\n              props.deliv?.sourceAddress.Location.Latitude,\r\n              props.deliv?.sourceAddress.Location.Longitude\r\n            )\r\n          );\r\n          props.deliv.destinationAddress.forEach((el) => {\r\n            preparedData.push(\r\n              L.latLng(el.Location.Latitude, el.Location.Longitude)\r\n            );\r\n          });\r\n    \r\n          var control = L.Routing.control({\r\n            waypoints: preparedData,\r\n            //router: new L.Routing.Google(),\r\n            lineOptions: {\r\n              styles: [\r\n                {\r\n                  color: \"blue\",\r\n                  opacity: 0.6,\r\n                  weight: 4,\r\n                },\r\n              ],\r\n            },\r\n            addWaypoints: false,\r\n            draggableWaypoints: false,\r\n            fitSelectedRoutes: true,\r\n            showAlternatives: false,\r\n          });\r\n          //L.Routing.Itinerary({ show: false });\r\n          control.addTo(map);\r\n    \r\n          map.panTo([\r\n            props.deliv?.sourceAddress.Location.Latitude,\r\n            props.deliv?.sourceAddress.Location.Longitude,\r\n          ]);\r\n          return (\r\n            <>\r\n              <Marker\r\n                position={[\r\n                  props.deliv?.sourceAddress.Location.Latitude,\r\n                  props.deliv?.sourceAddress.Location.Longitude,\r\n                ]}\r\n              >\r\n                <Popup>\r\n                  <span>start : {props.deliv?.sourceAddress.City}</span>\r\n                </Popup>\r\n              </Marker>\r\n            </>\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n      };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <Card className=\"mb-4\">      \r\n                        <CardContent className=\"p-3\">\r\n                            <h5 className=\"card-title font-weight-bold font-size-lg\">\r\n                                \r\n                            </h5>\r\n                            <p className=\"card-text\">\r\n                                <strong>Package type : {props.deliv?.package[0].type}</strong> \r\n                            </p>\r\n                            <p className=\"card-text\">\r\n                                Customer:\r\n                                <strong> Full name: {props.deliv?.customer.FirstName} {props.deliv?.customer.LastName}</strong> \r\n                                <strong>Phone Number : </strong> {props.deliv?.customer.PhoneNumber}\r\n                            </p> \r\n                            <p className=\"card-text\">\r\n                                <strong>Package type : {props.deliv?.package[0].type}</strong> \r\n                            </p> \r\n\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12} lg={6}>\r\n                <MapContainer center={[0,0]} zoom={13} scrollWheelZoom={true}>\r\n                  <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  />\r\n                  <MyMarkers />\r\n                </MapContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport {ExampleWrapperSeamless, PageTitle} from '../../layout-componentsBack';\r\nimport DeliveryDetails from \"../../components/back/DeliveryDetails\";\r\nimport {useServerApi} from '../../hooks/useServerApi';\r\n\r\nexport default function Delivery() {\r\n    const {id} = useParams();\r\n    const [delivery, err, reload] = useServerApi(\"delivery/\"+id);\r\n    const toRender = delivery;\r\n    return (\r\n        <Fragment>\r\n            <PageTitle\r\n                titleHeading=\"Packages\"\r\n                titleDescription=\"Wonderful animated charts built with ApexCharts components.\"\r\n            />\r\n            <ExampleWrapperSeamless sectionHeading=\"Packages Table\">\r\n            {toRender ?\r\n              (   <>\r\n                    <DeliveryDetails deliv={toRender}/>\r\n                  </>\r\n              ) : (<p>Delivery not found</p>)}\r\n                \r\n            </ExampleWrapperSeamless>\r\n        </Fragment>\r\n    );\r\n}\r\n"],"sourceRoot":""}