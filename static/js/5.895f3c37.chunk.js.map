{"version":3,"sources":["../node_modules/@material-ui/icons/AccountCircle.js","../node_modules/@material-ui/core/esm/FormGroup/FormGroup.js","components/back/UpdateCustomerForm.js","pages/back/UpdateCustomer.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","FormGroup","React","forwardRef","props","ref","classes","className","_props$row","row","other","_objectWithoutProperties","_extends","clsx","root","withStyles","display","flexDirection","flexWrap","name","useStyles","makeStyles","theme","margin","spacing","withoutLabel","marginTop","textField","width","YupSchema","Yup","firstname","required","username","lastname","email","phoneNumber","positive","street","city","zipCode","UpdateCustomerForm","history","useHistory","useState","visible","message","error","setError","formik","useFormik","initialValues","cin","validationSchema","onSubmit","values","a","console","log","queryServerApi","id","err","JSON","stringify","errors","push","useEffect","res","setValues","Cin","FirstName","LastName","UserName","Email","PhoneNumber","Adress","Street","City","ZipCode","fetchDataForm","Grid","container","item","xs","lg","Card","Divider","handleSubmit","isValid","severity","InputLabel","FormControl","variant","FilledInput","onChange","handleChange","aria-describedby","type","disabled","inputProps","FormHelperText","touched","component","htmlFor","Input","startAdornment","InputAdornment","position","alignItems","TextField","fullWidth","label","placeholder","multiline","OutlinedInput","labelWidth","Button","color","onClick","UpdateCustomer","useParams","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/5.895f3c37.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z\"\n}), 'AccountCircle');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  },\n\n  /* Styles applied to the root element if `row={true}`. */\n  row: {\n    flexDirection: 'row'\n  }\n};\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nvar FormGroup = React.forwardRef(function FormGroup(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$row = props.row,\n      row = _props$row === void 0 ? false : _props$row,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"row\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, row && classes.row),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display group of elements in a compact row.\n   */\n  row: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormGroup'\n})(FormGroup);","import React, {Fragment, useEffect, useState} from 'react';\r\nimport * as Yup from \"yup\";\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport {\r\n    Grid,\r\n    Input,\r\n    Card,\r\n    FormControl,\r\n    FormHelperText,\r\n    Divider,\r\n    InputLabel,\r\n    FormGroup,\r\n    InputAdornment,\r\n    TextField,\r\n    Button\r\n\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport {useFormik} from \"formik\";\r\nimport {useHistory} from \"react-router\";\r\nimport {queryServerApi} from \"../../utils/queryServerApi\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst UpdateCustomerForm = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [error,setError] = useState({visible: false,message: \"\"});\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            cin: 0,\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            username: \"\",\r\n            email: \"\",\r\n            phoneNumber: 0,\r\n            street: \"\",\r\n            city: \"\",\r\n            zipCode: 0\r\n        },\r\n        validationSchema:YupSchema,\r\n        onSubmit: async (values) =>{\r\n            console.log(values);\r\n            const [,err] = await queryServerApi(\"customers/update/\" +props.id, values,\"PUT\",false);\r\n            if(err){\r\n                setError({\r\n                    visible: true,\r\n                    message: JSON.stringify(err.errors, null, 2),\r\n                });\r\n            }\r\n            else history.push(\"/Customers\")\r\n        }\r\n    });\r\n\r\n    const Reset= ()=>{\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"customers/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                cin: res.Cin,\r\n                firstname: res.FirstName,\r\n                lastname: res.LastName,\r\n                username: res.UserName,\r\n                email: res.Email,\r\n                phoneNumber: res.PhoneNumber,\r\n                street: res.Adress.Street,\r\n                city: res.Adress.City,\r\n                zipCode: res.Adress.ZipCode\r\n            });\r\n        }\r\n        fetchDataForm();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"id child\",props.id)\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"customers/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                cin: res.Cin,\r\n                firstname: res.FirstName,\r\n                lastname: res.LastName,\r\n                username: res.UserName,\r\n                email: res.Email,\r\n                phoneNumber: res.PhoneNumber,\r\n                street: res.Adress.Street,\r\n                city: res.Adress.City,\r\n                zipCode: res.Adress.ZipCode\r\n            });\r\n        }\r\n        fetchDataForm();\r\n        // eslint-disable-next-line\r\n    },[props.id]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12} lg={6}>\r\n                    <Card className=\"p-4 mb-4\">\r\n                        <div className=\"font-size-lg font-weight-bold\">Customer</div>\r\n                        <Divider className=\"my-4\" />\r\n\r\n                        <form onSubmit={formik.handleSubmit}>\r\n\r\n\r\n                            <FormGroup>\r\n                                {error.visible && <span>{error.message}</span>}\r\n\r\n                                {!formik.isValid &&\r\n                                <MuiAlert className=\"mb-4\" severity=\"error\">\r\n                                    <div className=\"d-flex align-items-center align-content-center\">\r\n                                         <span>\r\n                                         <strong className=\"d-block\">Danger!</strong> Check out the form again\r\n                                         </span>\r\n                                    </div>\r\n                                </MuiAlert>}\r\n\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <InputLabel>Informations</InputLabel>\r\n\r\n                                <FormControl\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    variant=\"filled\">\r\n                                    <FilledInput\r\n                                        id=\"cin\"\r\n                                        value={formik.values.cin}\r\n                                        onChange={formik.handleChange}\r\n                                        aria-describedby=\"filled-weight-helper-text\"\r\n                                        type=\"number\"\r\n                                        disabled=\"true\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'cin'\r\n                                        }}\r\n                                    />\r\n                                    <FormHelperText id=\"filled-weight-helper-text\">\r\n                                        CIN\r\n                                    </FormHelperText>\r\n                                </FormControl>\r\n\r\n\r\n                                <FormControl className=\"w-100 m-2\"\r\n                                             error={formik.errors.username && formik.touched.username} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                       Username\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"username\"\r\n                                        startAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        value={formik.values.username}\r\n                                        onChange={formik.handleChange}\r\n                                    />\r\n                                    {formik.errors.username && formik.touched.username && (\r\n                                        <FormHelperText>{formik.errors.username}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n\r\n                            </FormGroup>\r\n\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                 error={formik.errors.firstname && formik.touched.firstname} component=\"fieldset\">\r\n                                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"firstname\"\r\n                                            label=\"First Name\"\r\n                                            value={formik.values.firstname}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.firstname && formik.touched.firstname && (\r\n                                    <FormHelperText>{formik.errors.firstname}</FormHelperText>\r\n                                )}\r\n\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.lastname && formik.touched.lastname} component=\"fieldset\">\r\n\r\n                            <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"lastname\"\r\n                                            label=\"Last name\"\r\n                                            value={formik.values.lastname}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.lastname && formik.touched.lastname && (\r\n                                    <FormHelperText>{formik.errors.lastname}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n\r\n                            <FormGroup>\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.email && formik.touched.email} component=\"fieldset\">\r\n\r\n                            <TextField\r\n                                    fullWidth\r\n                                    className=\"m-2\"\r\n                                    id=\"email\"\r\n                                    label=\"Email\"\r\n                                    placeholder=\"test.test@gmail.com\"\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    multiline\r\n                                />\r\n                                {formik.errors.email && formik.touched.email && (\r\n                                    <FormHelperText>{formik.errors.email}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n                                <FormControl\r\n                                    className={clsx(\r\n                                        classes.margin,\r\n                                        classes.withoutLabel,\r\n                                        classes.textField\r\n                                    )}\r\n                                    error={formik.errors.phoneNumber && formik.touched.phoneNumber} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                        Phone Number\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"phoneNumber\"\r\n                                        value={formik.values.phoneNumber}\r\n                                        onChange={formik.handleChange}\r\n\r\n                                        aria-describedby=\"standard-weight-helper-text\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'phoneNumber'\r\n                                        }}\r\n                                    />\r\n                                    {formik.errors.phoneNumber && formik.touched.phoneNumber && (\r\n                                        <FormHelperText>{formik.errors.phoneNumber}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n                            </FormGroup>\r\n\r\n\r\n                            <p></p>\r\n                            <InputLabel>Address</InputLabel>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.street && formik.touched.street} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"street\"\r\n                                    value={formik.values.street}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'street'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Street\r\n                                </FormHelperText>\r\n                                {formik.errors.street && formik.touched.street && (\r\n                                    <FormHelperText>{formik.errors.street}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.city && formik.touched.city} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"city\"\r\n                                    value={formik.values.city}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'city'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    City\r\n                                </FormHelperText>\r\n                                {formik.errors.city && formik.touched.city && (\r\n                                    <FormHelperText>{formik.errors.city}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.zipCode && formik.touched.zipCode} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"zipCode\"\r\n                                    value={formik.values.zipCode}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'zipCode'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Zip Code\r\n                                </FormHelperText>\r\n                                {formik.errors.zipCode && formik.touched.zipCode && (\r\n                                    <FormHelperText>{formik.errors.zipCode}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n                            <p></p>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Update\r\n                            </Button>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"secondary\" onClick={Reset}>\r\n                                Reset\r\n                            </Button>\r\n\r\n                        </form>\r\n\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    textField: {\r\n        width: 200\r\n    }\r\n}));\r\n\r\nconst YupSchema = Yup.object ({\r\n    firstname: Yup.string()\r\n        .required(\"First Name is Required\"),\r\n    username: Yup.string()\r\n        .required(\"Username is Required\"),\r\n    lastname: Yup.string()\r\n        .required(\"Last Name is Required\"),\r\n    email: Yup.string()\r\n        .email(\"No valid Email \")\r\n        .required(\"email is Required\"),\r\n    phoneNumber: Yup.number(\"Phone Number should be a number\")\r\n        .positive(\"Phone Number should be Positive\")\r\n        .required(\"phone number is Required\"),\r\n    street: Yup.string()\r\n        .required(\"street is required\"),\r\n    city: Yup.string()\r\n        .required(\"city is required\"),\r\n    zipCode: Yup.number(\"Zip Code should be a number\")\r\n        .positive(\"Zip Code should be Positive\")\r\n        .required(\"Zip Code is Required\")\r\n});\r\n\r\nexport default UpdateCustomerForm;\r\n","import React, {Fragment} from 'react';\r\nimport { PageTitle } from '../../layout-componentsBack';\r\nimport { ExampleWrapperSeamless } from '../../layout-componentsBack';\r\nimport UpdateCustomerForm from \"../../components/back/UpdateCustomerForm\";\r\nimport {useParams} from \"react-router\";\r\n\r\n\r\n\r\nexport default function UpdateCustomer() {\r\n    const { id } = useParams();\r\n\r\n    return (\r\n        <Fragment>\r\n            <PageTitle\r\n                titleHeading=\"Update Customer\"\r\n                titleDescription=\"Wide selection of forms controls, using a standardised code base, specifically for React.\"\r\n            />\r\n            <ExampleWrapperSeamless sectionHeading=\"\">\r\n                <UpdateCustomerForm id={id}/>\r\n            </ExampleWrapperSeamless>\r\n        </Fragment>\r\n    );\r\n}\r\n"],"sourceRoot":""}