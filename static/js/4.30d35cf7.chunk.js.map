{"version":3,"sources":["../node_modules/@material-ui/icons/AccountCircle.js","../node_modules/@material-ui/core/esm/FormGroup/FormGroup.js","components/back/UpdateCompanyForm.js","pages/back/UpdateCompany.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","FormGroup","React","forwardRef","props","ref","classes","className","_props$row","row","other","_objectWithoutProperties","_extends","clsx","root","withStyles","display","flexDirection","flexWrap","name","useStyles","makeStyles","theme","margin","spacing","withoutLabel","marginTop","textField","width","YupSchema","Yup","Street","required","City","ZipCode","positive","ResponsibleCin","ResponsibleName","CommercialName","Activity","RegisterStatus","RegionalOffice","Denomination","TaxSituation","Email","email","PhoneNumber","UpdateCompanyForm","history","useHistory","useState","visible","message","error","setError","formik","useFormik","initialValues","CreationYear","validationSchema","onSubmit","values","a","console","log","queryServerApi","id","err","JSON","stringify","errors","push","useEffect","res","setValues","HeadquartersAddress","fetchDataForm","Grid","container","item","xs","lg","Card","Divider","handleSubmit","isValid","severity","InputLabel","FormControl","variant","FilledInput","onChange","handleChange","aria-describedby","type","inputProps","FormHelperText","touched","component","htmlFor","Input","startAdornment","InputAdornment","position","ResponsibleNames","alignItems","TextField","fullWidth","label","placeholder","multiline","OutlinedInput","labelWidth","street","Button","color","onClick","UpdateCompany","useParams","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/4.30d35cf7.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z\"\n}), 'AccountCircle');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  },\n\n  /* Styles applied to the root element if `row={true}`. */\n  row: {\n    flexDirection: 'row'\n  }\n};\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nvar FormGroup = React.forwardRef(function FormGroup(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$row = props.row,\n      row = _props$row === void 0 ? false : _props$row,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"row\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, row && classes.row),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display group of elements in a compact row.\n   */\n  row: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormGroup'\n})(FormGroup);","import React, {Fragment, useEffect, useState} from 'react';\r\nimport * as Yup from \"yup\";\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport {\r\n    Grid,\r\n    Input,\r\n    Card,\r\n    FormControl,\r\n    FormHelperText,\r\n    Divider,\r\n    InputLabel,\r\n    FormGroup,\r\n    InputAdornment,\r\n    TextField,\r\n    Button\r\n\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport {useFormik} from \"formik\";\r\nimport {useHistory} from \"react-router\";\r\nimport {queryServerApi} from \"../../utils/queryServerApi\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst UpdateCompanyForm = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [error,setError] = useState({visible: false,message: \"\"});\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            ResponsibleCin: \"\",\r\n            ResponsibleName: \"\",\r\n            CreationYear: \"\",\r\n            CommercialName: \"\",\r\n            Activity: \"\",\r\n            Street: \"\",\r\n            City: \"\",\r\n            ZipCode: \"\",\r\n            RegisterStatus: \"\",\r\n            RegionalOffice: \"\",\r\n            Denomination: \"\",\r\n            TaxSituation: \"\",\r\n            Email: \"\",\r\n            PhoneNumber: \"\"\r\n        },validationSchema:YupSchema,\r\n        onSubmit: async (values) =>{\r\n            console.log(values);\r\n            const [,err] = await queryServerApi(\"entreprises/update/\" +props.id, values,\"PUT\",false);\r\n            if(err){\r\n                setError({\r\n                    visible: true,\r\n                    message: JSON.stringify(err.errors, null, 2),\r\n                });\r\n            }\r\n            else history.push(\"/Entreprises\")\r\n        }\r\n    });\r\n\r\n    const Reset= ()=>{\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"entreprises/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                ResponsibleCin: res.ResponsibleCin,\r\n                ResponsibleName: res.ResponsibleName,\r\n                CreationYear: res.CreationYear,\r\n                CommercialName: res.CommercialName,\r\n                Activity: res.Activity,\r\n                Street: res.HeadquartersAddress.Street,\r\n                City: res.HeadquartersAddress.City,\r\n                ZipCode: res.HeadquartersAddress.ZipCode,\r\n                RegisterStatus: res.RegisterStatus,\r\n                RegionalOffice: res.RegionalOffice,\r\n                Denomination: res.Denomination,\r\n                TaxSituation: res.TaxSituation,\r\n                Email: res.Email,\r\n                PhoneNumber: res.PhoneNumber\r\n            });\r\n        }\r\n        fetchDataForm();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"id child\",props.id)\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"entreprises/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                ResponsibleCin: res.ResponsibleCin,\r\n                ResponsibleName: res.ResponsibleName,\r\n                CreationYear: res.CreationYear,\r\n                CommercialName: res.CommercialName,\r\n                Activity: res.Activity,\r\n                Street: res.HeadquartersAddress.Street,\r\n                City: res.HeadquartersAddress.City,\r\n                ZipCode: res.HeadquartersAddress.ZipCode,\r\n                RegisterStatus: res.RegisterStatus,\r\n                RegionalOffice: res.RegionalOffice,\r\n                Denomination: res.Denomination,\r\n                TaxSituation: res.TaxSituation,\r\n                Email: res.Email,\r\n                PhoneNumber: res.PhoneNumber\r\n            });\r\n        }\r\n        fetchDataForm();\r\n        // eslint-disable-next-line\r\n    },[props.id]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12} lg={6}>\r\n                    <Card className=\"p-4 mb-4\">\r\n                        <div className=\"font-size-lg font-weight-bold\">Company</div>\r\n                        <Divider className=\"my-4\" />\r\n\r\n                        <form onSubmit={formik.handleSubmit}>\r\n\r\n\r\n                            <FormGroup>\r\n                                {error.visible && <span>{error.message}</span>}\r\n\r\n                                {!formik.isValid &&\r\n                                <MuiAlert className=\"mb-4\" severity=\"error\">\r\n                                    <div className=\"d-flex align-items-center align-content-center\">\r\n                                         <span>\r\n                                         <strong className=\"d-block\">Danger!</strong> Check out the form again\r\n                                         </span>\r\n                                    </div>\r\n                                </MuiAlert>}\r\n\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <InputLabel>Informations</InputLabel>\r\n\r\n                                <FormControl\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    variant=\"filled\">\r\n                                    <FilledInput\r\n                                        id=\"ResponsibleCin\"\r\n                                        value={formik.values.ResponsibleCin}\r\n                                        onChange={formik.handleChange}\r\n                                        aria-describedby=\"filled-weight-helper-text\"\r\n                                        type=\"number\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'cin'\r\n                                        }}\r\n                                    />\r\n                                    <FormHelperText id=\"filled-weight-helper-text\">\r\n                                        Responsible CIN\r\n                                    </FormHelperText>\r\n                                </FormControl>\r\n\r\n\r\n                                <FormControl className=\"w-100 m-2\"\r\n                                             error={formik.errors.ResponsibleName && formik.touched.ResponsibleName} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                        Responsible Name\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"ResponsibleName\"\r\n                                        startAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        value={formik.values.ResponsibleName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.errors.ResponsibleName && formik.touched.ResponsibleName}\r\n                                    />\r\n                                    {formik.errors.ResponsibleName && formik.touched.ResponsibleName && (\r\n                                        <FormHelperText>{formik.errors.ResponsibleNames}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n\r\n                            </FormGroup>\r\n\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                 error={formik.errors.Denomination && formik.touched.Denomination} component=\"fieldset\">\r\n                                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"Denomination\"\r\n                                            label=\"Denomination\"\r\n                                            value={formik.values.Denomination}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.Denomination && formik.touched.Denomination && (\r\n                                    <FormHelperText>{formik.errors.Denomination}</FormHelperText>\r\n                                )}\r\n\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.CommercialName && formik.touched.CommercialName} component=\"fieldset\">\r\n\r\n                            <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"CommercialName\"\r\n                                            label=\"Commercial Name\"\r\n                                            value={formik.values.CommercialName}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.CommercialName && formik.touched.CommercialName && (\r\n                                    <FormHelperText>{formik.errors.CommercialName}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n\r\n                            <FormGroup>\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.Email && formik.touched.Email} component=\"fieldset\">\r\n\r\n                            <TextField\r\n                                    fullWidth\r\n                                    className=\"m-2\"\r\n                                    id=\"Email\"\r\n                                    label=\"Email\"\r\n                                    placeholder=\"test.test@gmail.com\"\r\n                                    value={formik.values.Email}\r\n                                    onChange={formik.handleChange}\r\n                                    multiline\r\n                                />\r\n                                {formik.errors.Email && formik.touched.Email && (\r\n                                    <FormHelperText>{formik.errors.Email}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n                                <FormControl\r\n                                    className={clsx(\r\n                                        classes.margin,\r\n                                        classes.withoutLabel,\r\n                                        classes.textField\r\n                                    )}\r\n                                    error={formik.errors.PhoneNumber && formik.touched.PhoneNumber} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                        Phone Number\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"PhoneNumber\"\r\n                                        value={formik.values.PhoneNumber}\r\n                                        onChange={formik.handleChange}\r\n\r\n                                        aria-describedby=\"standard-weight-helper-text\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'PhoneNumber'\r\n                                        }}\r\n                                    />\r\n                                    {formik.errors.PhoneNumber && formik.touched.PhoneNumber && (\r\n                                        <FormHelperText>{formik.errors.PhoneNumber}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n                            </FormGroup>\r\n\r\n\r\n\r\n                            <p></p>\r\n                            <InputLabel>Other Details</InputLabel>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.CreationYear && formik.touched.CreationYear} component=\"fieldset\">\r\n\r\n                                <input\r\n                                    id=\"street\"\r\n                                    type=\"date\"\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Creation year\r\n                                </FormHelperText>\r\n                                {formik.errors.CreationYear && formik.touched.CreationYear && (\r\n                                    <FormHelperText>{formik.errors.CreationYear}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.Activity && formik.touched.Activity} component=\"fieldset\">\r\n\r\n                                <OutlinedInput\r\n                                    id=\"city\"\r\n                                    value={formik.values.Activity}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'Activity'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Activity\r\n                                </FormHelperText>\r\n                                {formik.errors.Activity && formik.touched.Activity && (\r\n                                    <FormHelperText>{formik.errors.Activity}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.TaxSituation && formik.touched.TaxSituation} component=\"fieldset\">\r\n\r\n                                <OutlinedInput\r\n                                    id=\"TaxSituation\"\r\n                                    value={formik.values.TaxSituation}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'TaxSituation'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Tax Situation\r\n                                </FormHelperText>\r\n                                {formik.errors.TaxSituation && formik.touched.TaxSituation && (\r\n                                    <FormHelperText>{formik.errors.RegionalOffice}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.RegisterStatus && formik.touched.RegisterStatus} component=\"fieldset\">\r\n\r\n                                <OutlinedInput\r\n                                    id=\"RegisterStatus\"\r\n                                    value={formik.values.RegisterStatus}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'RegisterStatus'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Register Status\r\n                                </FormHelperText>\r\n                                {formik.errors.RegisterStatus && formik.touched.RegisterStatus && (\r\n                                    <FormHelperText>{formik.errors.RegisterStatus}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n                            <p></p>\r\n                            <InputLabel>Address</InputLabel>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.Street && formik.touched.Street} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"Street\"\r\n                                    value={formik.values.Street}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'Street'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Street\r\n                                </FormHelperText>\r\n                                {formik.errors.Street && formik.touched.Street && (\r\n                                    <FormHelperText>{formik.errors.street}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.City && formik.touched.City} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"City\"\r\n                                    value={formik.values.City}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'City'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    City\r\n                                </FormHelperText>\r\n                                {formik.errors.City && formik.touched.City && (\r\n                                    <FormHelperText>{formik.errors.City}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.RegionalOffice && formik.touched.RegionalOffice} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"RegionalOffice\"\r\n                                    value={formik.values.RegionalOffice}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'zipCode'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Regional Office\r\n                                </FormHelperText>\r\n                                {formik.errors.RegionalOffice && formik.touched.RegionalOffice && (\r\n                                    <FormHelperText>{formik.errors.RegionalOffice}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.ZipCode && formik.touched.ZipCode} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"ZipCode\"\r\n                                    value={formik.values.ZipCode}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'zipCode'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Zip Code\r\n                                </FormHelperText>\r\n                                {formik.errors.ZipCode && formik.touched.ZipCode && (\r\n                                    <FormHelperText>{formik.errors.ZipCode}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n                            <p></p>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Update\r\n                            </Button>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"secondary\" onClick={Reset}>\r\n                                Reset\r\n                            </Button>\r\n\r\n                        </form>\r\n\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    textField: {\r\n        width: 200\r\n    }\r\n}));\r\n\r\nconst YupSchema = Yup.object ({\r\n    Street: Yup.string()\r\n        .required(\"street is required\"),\r\n    City: Yup.string()\r\n        .required(\"city is required\"),\r\n    ZipCode: Yup.number(\"Zip Code should be a number\")\r\n        .positive(\"Zip Code should be Positive\")\r\n        .required(\"Zip Code is Required\"),\r\n    ResponsibleCin: Yup.number(\"ResponsibleCin should be a number\")\r\n    .positive(\"ResponsibleCin should be Positive\")\r\n    .required(\"ResponsibleCin is Required\"),\r\n    ResponsibleName: Yup.string()\r\n        .required(\"Responsibl eName is required\"),\r\n    CommercialName: Yup.string()\r\n        .required(\"Commercial Name is required\"),\r\n    Activity: Yup.string()\r\n        .required(\"Activity is required\"),\r\n    RegisterStatus:Yup.string()\r\n        .required(\"Register Status is required\"),\r\n    RegionalOffice: Yup.string()\r\n        .required(\"Regional Office is required\"),\r\n    Denomination: Yup.string()\r\n        .required(\"Denomination is required\"),\r\n    TaxSituation: Yup.string()\r\n        .required(\"TaxSituation is required\"),\r\n    Email: Yup.string()\r\n        .email(\"No valid Email \")\r\n        .required(\"email is Required\"),\r\n    PhoneNumber: Yup.number(\"Phone Number should be a number\")\r\n        .positive(\"Phone Number should be Positive\")\r\n        .required(\"phone number is Required\"),\r\n});\r\n\r\nexport default UpdateCompanyForm;\r\n","import React, {Fragment} from 'react';\r\nimport { PageTitle } from '../../layout-componentsBack';\r\nimport { ExampleWrapperSeamless } from '../../layout-componentsBack';\r\nimport {useParams} from \"react-router\";\r\nimport UpdateCompanyForm from \"../../components/back/UpdateCompanyForm\";\r\n\r\n\r\n\r\nexport default function UpdateCompany() {\r\n    const { id } = useParams();\r\n\r\n    return (\r\n        <Fragment>\r\n            <PageTitle\r\n                titleHeading=\"Update Customer\"\r\n                titleDescription=\"Wide selection of forms controls, using a standardised code base, specifically for React.\"\r\n            />\r\n            <ExampleWrapperSeamless sectionHeading=\"\">\r\n                <UpdateCompanyForm id={id}/>\r\n            </ExampleWrapperSeamless>\r\n        </Fragment>\r\n    );\r\n}\r\n"],"sourceRoot":""}