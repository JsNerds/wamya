{"version":3,"sources":["components/back/UpdatedmForm.js","pages/back/Updatedm.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","YupSchema","Yup","FullName","required","Username","address","Email","email","Phone","positive","UpdatedmForm","props","classes","history","useHistory","useState","visible","message","error","setError","formik","useFormik","initialValues","Cin","validationSchema","onSubmit","values","a","console","log","queryServerApi","id","err","JSON","stringify","errors","push","useEffect","res","setValues","fetchDataForm","Grid","container","item","xs","lg","Card","className","Divider","handleSubmit","FormGroup","isValid","severity","InputLabel","FormControl","clsx","variant","FilledInput","value","cin","onChange","handleChange","aria-describedby","type","disabled","inputProps","FormHelperText","touched","component","htmlFor","Input","startAdornment","InputAdornment","position","alignItems","TextField","fullWidth","label","placeholder","multiline","name","event","setFieldValue","target","files","image","Button","color","onClick","Updatedm","useParams","titleHeading","titleDescription","sectionHeading"],"mappings":"8YA0TMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,QAEZC,OAAQ,CACNA,OAAQJ,EAAMK,QAAQ,IAExBC,aAAc,CACZC,UAAWP,EAAMK,QAAQ,IAE3BG,UAAW,CACTC,MAAO,SAILC,EAAYC,IAAW,CAC3BC,SAAUD,MAAaE,SAAS,6BAChCC,SAAUH,MAAaE,SAAS,wBAChCE,QAASJ,MAAaE,SAAS,uBAC/BG,MAAOL,MACJM,MAAM,mBACNJ,SAAS,qBACZK,MAAOP,IAAW,mCACfQ,SAAS,mCACTN,SAAS,8BAGCO,EA1TM,SAACC,GACpB,IAAMC,EAAUxB,IACVyB,EAAUC,cAFc,EAGJC,mBAAS,CAAEC,SAAS,EAAOC,QAAS,KAHhC,mBAGvBC,EAHuB,KAGhBC,EAHgB,KAKxBC,EAASC,YAAU,CACvBC,cAAe,CACbC,IAAK,EACLf,MAAO,EACPN,SAAU,GACVG,QAAS,GACTD,SAAU,GACVE,MAAO,IAETkB,iBAAkBxB,EAClByB,SAAS,WAAD,4BAAE,WAAOC,GAAP,mBAAAC,EAAA,6DACRC,QAAQC,IAAIH,GADJ,SAEcI,YACpB,wBAA0BnB,EAAMoB,GAChCL,EACA,OACA,GANM,oCAECM,EAFD,MASNb,EAAS,CACPH,SAAS,EACTC,QAASgB,KAAKC,UAAUF,EAAIG,OAAQ,KAAM,KAEvCtB,EAAQuB,KAAK,oBAbZ,2CAAF,mDAAC,KAuDX,OApBAC,qBAAU,WAAM,4CAEd,kCAAAV,EAAA,sEAC2BG,YAAe,sBAAwBnB,EAAMoB,IADxE,mCACSO,EADT,KACcN,EADd,KAEEb,EAAS,CACPH,SAAS,EACTC,QAASgB,KAAKC,UAAL,OAAeF,QAAf,IAAeA,OAAf,EAAeA,EAAKG,OAAQ,KAAM,KAE7Cf,EAAOmB,UAAU,CACfrC,SAAUoC,EAAIpC,SACdE,SAAUkC,EAAIlC,SACdC,QAASiC,EAAIjC,QACbC,MAAOgC,EAAIhC,MACXE,MAAO8B,EAAI9B,QAXf,4CAFc,sBACdoB,QAAQC,IAAI,WAAYlB,EAAMoB,IADhB,mCAgBdS,KAEC,CAAC7B,EAAMoB,KAGR,kBAAC,WAAD,KACE,kBAACU,EAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,GACvB,kBAAC8C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAMC,UAAU,YACd,yBAAKA,UAAU,iCAAf,gBACA,kBAACC,EAAA,EAAD,CAASD,UAAU,SAEnB,0BAAMtB,SAAUL,EAAO6B,cACrB,kBAACC,EAAA,EAAD,KACGhC,EAAMF,SAAW,8BAAOE,EAAMD,UAE7BG,EAAO+B,SACP,kBAAC,IAAD,CAAUJ,UAAU,OAAOK,SAAS,SAClC,yBAAKL,UAAU,kDACb,8BACE,4BAAQA,UAAU,WAAlB,WADF,gCASR,kBAACG,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CACEP,UAAWQ,YAAK3C,EAAQlB,OAAQkB,EAAQd,WACxC0D,QAAQ,UAER,kBAACC,EAAA,EAAD,CACE1B,GAAG,MACH2B,MAAOtC,EAAOM,OAAOiC,IACrBC,SAAUxC,EAAOyC,aACjBC,mBAAiB,4BACjBC,KAAK,SACLC,SAAS,OACTC,WAAY,CACV,aAAc,SAGlB,kBAACC,EAAA,EAAD,CAAgBnC,GAAG,6BAAnB,aAKF,kBAACuB,EAAA,EAAD,CACEP,UAAU,YACV7B,MAAOE,EAAOe,OAAO/B,UAAYgB,EAAO+C,QAAQ/D,SAChDgE,UAAU,YAEV,kBAACf,EAAA,EAAD,CAAYgB,QAAQ,6BAApB,YAGA,kBAACC,EAAA,EAAD,CACEvC,GAAG,WACHwC,eACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SACvB,kBAAC,IAAD,OAGJf,MAAOtC,EAAOM,OAAOtB,SACrBwD,SAAUxC,EAAOyC,eAElBzC,EAAOe,OAAO/B,UAAYgB,EAAO+C,QAAQ/D,UACxC,kBAAC8D,EAAA,EAAD,KAAiB9C,EAAOe,OAAO/B,YAKrC,kBAACkD,EAAA,EAAD,CACEP,UAAWQ,YAAK3C,EAAQlB,OAAQkB,EAAQd,WACxC0D,QAAQ,WACRtC,MAAOE,EAAOe,OAAOjC,UAAYkB,EAAO+C,QAAQjE,SAChDkE,UAAU,YAEV,kBAAC3B,EAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,EAAG+E,WAAW,YACrC,kBAACjC,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACF,EAAA,EAAD,CAAME,MAAI,GACR,kBAACgC,EAAA,EAAD,CACEC,WAAS,EACT7C,GAAG,WACH8C,MAAM,WACNnB,MAAOtC,EAAOM,OAAOxB,SACrB0D,SAAUxC,EAAOyC,iBAItBzC,EAAOe,OAAOjC,UAAYkB,EAAO+C,QAAQjE,UACxC,kBAACgE,EAAA,EAAD,KAAiB9C,EAAOe,OAAOjC,WAInC,kBAACoD,EAAA,EAAD,CACEP,UAAWQ,YAAK3C,EAAQlB,OAAQkB,EAAQd,WACxC0D,QAAQ,WACRtC,MAAOE,EAAOe,OAAO9B,SAAWe,EAAO+C,QAAQ9D,QAC/C+D,UAAU,YAEV,kBAAC3B,EAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,EAAG+E,WAAW,YACrC,kBAACjC,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACF,EAAA,EAAD,CAAME,MAAI,GACR,kBAACgC,EAAA,EAAD,CACEC,WAAS,EACT7C,GAAG,UACH8C,MAAM,UACNnB,MAAOtC,EAAOM,OAAOrB,QACrBuD,SAAUxC,EAAOyC,iBAItBzC,EAAOe,OAAO9B,SAAWe,EAAO+C,QAAQ9D,SACvC,kBAAC6D,EAAA,EAAD,KAAiB9C,EAAOe,OAAO9B,UAInC,kBAAC6C,EAAA,EAAD,KACE,kBAACI,EAAA,EAAD,CACEP,UAAWQ,YAAK3C,EAAQlB,OAAQkB,EAAQd,WACxC0D,QAAQ,WACRtC,MAAOE,EAAOe,OAAO7B,OAASc,EAAO+C,QAAQ7D,MAC7C8D,UAAU,YAEV,kBAACO,EAAA,EAAD,CACEC,WAAS,EACT7B,UAAU,MACVhB,GAAG,QACH8C,MAAM,QACNC,YAAY,sBACZpB,MAAOtC,EAAOM,OAAOpB,MACrBsD,SAAUxC,EAAOyC,aACjBkB,WAAS,IAEV3D,EAAOe,OAAO7B,OAASc,EAAO+C,QAAQ7D,OACrC,kBAAC4D,EAAA,EAAD,KAAiB9C,EAAOe,OAAO7B,QAInC,kBAACgD,EAAA,EAAD,CACEP,UAAWQ,YACT3C,EAAQlB,OACRkB,EAAQhB,aACRgB,EAAQd,WAEVoB,MAAOE,EAAOe,OAAO3B,OAASY,EAAO+C,QAAQ3D,MAC7C4D,UAAU,YAEV,kBAACf,EAAA,EAAD,CAAYgB,QAAQ,6BAApB,gBAGA,kBAACC,EAAA,EAAD,CACEvC,GAAG,QACH2B,MAAOtC,EAAOM,OAAOlB,MACrBoD,SAAUxC,EAAOyC,aACjBC,mBAAiB,8BACjBG,WAAY,CACV,aAAc,WAGjB7C,EAAOe,OAAO3B,OAASY,EAAO+C,QAAQ3D,OACrC,kBAAC0D,EAAA,EAAD,KAAiB9C,EAAOe,OAAO3B,SAKrC,yBAAKuC,UAAU,uBACb,2BAAOA,UAAU,oBACd,IACD,mEAEF,6BAEA,kBAACuB,EAAA,EAAD,CACEvC,GAAG,YACHgC,KAAK,OACLiB,KAAK,MACLpB,SAAU,SAACqB,GACT7D,EAAO8D,cAAc,MAAOD,EAAME,OAAOC,MAAM,OAGlDhE,EAAOe,OAAOkD,OAASjE,EAAO+C,QAAQkB,OACrC,kBAACnB,EAAA,EAAD,CAAgBhD,MAAOE,EAAOe,OAAOkD,OAClCjE,EAAOe,OAAOkD,QAKrB,kBAACC,EAAA,EAAD,CACEvC,UAAU,MACVS,QAAQ,YACR+B,MAAM,UACNxB,KAAK,UAJP,UAQA,kBAACuB,EAAA,EAAD,CACEvC,UAAU,MACVS,QAAQ,YACR+B,MAAM,YACNC,QAlPA,WAAM,4CAClB,kCAAA7D,EAAA,sEAC2BG,YAAe,sBAAwBnB,EAAMoB,IADxE,mCACSO,EADT,KACcN,EADd,KAEEb,EAAS,CACPH,SAAS,EACTC,QAASgB,KAAKC,UAAL,OAAeF,QAAf,IAAeA,OAAf,EAAeA,EAAKG,OAAQ,KAAM,KAE7Cf,EAAOmB,UAAU,CACfrC,SAAUoC,EAAIpC,SACdE,SAAUkC,EAAIlC,SACdE,MAAOgC,EAAIhC,MACXE,MAAO8B,EAAI9B,MACXH,QAASiC,EAAIjC,UAXjB,4CADkB,uBAAC,WAAD,wBAelBmC,KA+NU,eCpSC,SAASiD,IAAY,IAC1B1D,EAAO2D,cAAP3D,GAER,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CACE4D,aAAa,eACbC,iBAAiB,8FAEnB,kBAAC,IAAD,CAAwBC,eAAe,IACrC,kBAAC,EAAD,CAAc9D,GAAIA,MAhB1B","file":"static/js/18.90e820c9.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  Grid,\r\n  Input,\r\n  Card,\r\n  FormControl,\r\n  FormHelperText,\r\n  Divider,\r\n  InputLabel,\r\n  FormGroup,\r\n  InputAdornment,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport { useFormik } from \"formik\";\r\nimport { useHistory } from \"react-router\";\r\nimport { queryServerApi } from \"../../utils/queryServerApi\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nconst UpdatedmForm = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [error, setError] = useState({ visible: false, message: \"\" });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      Cin: 0,\r\n      Phone: 0,\r\n      FullName: \"\",\r\n      address: \"\",\r\n      Username: \"\",\r\n      Email: \"\",\r\n    },\r\n    validationSchema: YupSchema,\r\n    onSubmit: async (values) => {\r\n      console.log(values);\r\n      const [, err] = await queryServerApi(\r\n        \"deliveryman/updatedm/\" + props.id,\r\n        values,\r\n        \"PUT\",\r\n        true\r\n      );\r\n      if (err) {\r\n        setError({\r\n          visible: true,\r\n          message: JSON.stringify(err.errors, null, 2),\r\n        });\r\n      } else history.push(\"/Deliverymanview\");\r\n    },\r\n  });\r\n\r\n  const Reset = () => {\r\n    async function fetchDataForm() {\r\n      const [res, err] = await queryServerApi(\"deliveryman/getdev/\" + props.id);\r\n      setError({\r\n        visible: true,\r\n        message: JSON.stringify(err?.errors, null, 2),\r\n      });\r\n      formik.setValues({\r\n        FullName: res.FullName,\r\n        Username: res.Username,\r\n        Email: res.Email,\r\n        Phone: res.Phone,\r\n        address: res.address,\r\n      });\r\n    }\r\n    fetchDataForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"id child\", props.id);\r\n    async function fetchDataForm() {\r\n      const [res, err] = await queryServerApi(\"deliveryman/getdev/\" + props.id);\r\n      setError({\r\n        visible: true,\r\n        message: JSON.stringify(err?.errors, null, 2),\r\n      });\r\n      formik.setValues({\r\n        FullName: res.FullName,\r\n        Username: res.Username,\r\n        address: res.address,\r\n        Email: res.Email,\r\n        Phone: res.Phone,\r\n      });\r\n    }\r\n    fetchDataForm();\r\n    // eslint-disable-next-line\r\n  }, [props.id]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} lg={6}>\r\n          <Card className=\"p-4 mb-4\">\r\n            <div className=\"font-size-lg font-weight-bold\">Delivery man</div>\r\n            <Divider className=\"my-4\" />\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <FormGroup>\r\n                {error.visible && <span>{error.message}</span>}\r\n\r\n                {!formik.isValid && (\r\n                  <MuiAlert className=\"mb-4\" severity=\"error\">\r\n                    <div className=\"d-flex align-items-center align-content-center\">\r\n                      <span>\r\n                        <strong className=\"d-block\">Danger!</strong> Check out\r\n                        the form again\r\n                      </span>\r\n                    </div>\r\n                  </MuiAlert>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <InputLabel>Informations</InputLabel>\r\n\r\n                <FormControl\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"filled\"\r\n                >\r\n                  <FilledInput\r\n                    id=\"cin\"\r\n                    value={formik.values.cin}\r\n                    onChange={formik.handleChange}\r\n                    aria-describedby=\"filled-weight-helper-text\"\r\n                    type=\"number\"\r\n                    disabled=\"true\"\r\n                    inputProps={{\r\n                      \"aria-label\": \"cin\",\r\n                    }}\r\n                  />\r\n                  <FormHelperText id=\"filled-weight-helper-text\">\r\n                    Username\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <FormControl\r\n                  className=\"w-100 m-2\"\r\n                  error={formik.errors.Username && formik.touched.Username}\r\n                  component=\"fieldset\"\r\n                >\r\n                  <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                    Username\r\n                  </InputLabel>\r\n                  <Input\r\n                    id=\"Username\"\r\n                    startAdornment={\r\n                      <InputAdornment position=\"start\">\r\n                        <AccountCircle />\r\n                      </InputAdornment>\r\n                    }\r\n                    value={formik.values.Username}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.Username && formik.touched.Username && (\r\n                    <FormHelperText>{formik.errors.Username}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </FormGroup>\r\n\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                error={formik.errors.FullName && formik.touched.FullName}\r\n                component=\"fieldset\"\r\n              >\r\n                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                  <Grid item>\r\n                    <AccountCircle />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"FullName\"\r\n                      label=\"FullName\"\r\n                      value={formik.values.FullName}\r\n                      onChange={formik.handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {formik.errors.FullName && formik.touched.FullName && (\r\n                  <FormHelperText>{formik.errors.FullName}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                error={formik.errors.address && formik.touched.address}\r\n                component=\"fieldset\"\r\n              >\r\n                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                  <Grid item>\r\n                    <AccountCircle />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"address\"\r\n                      label=\"address\"\r\n                      value={formik.values.address}\r\n                      onChange={formik.handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {formik.errors.address && formik.touched.address && (\r\n                  <FormHelperText>{formik.errors.address}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <FormGroup>\r\n                <FormControl\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  error={formik.errors.Email && formik.touched.Email}\r\n                  component=\"fieldset\"\r\n                >\r\n                  <TextField\r\n                    fullWidth\r\n                    className=\"m-2\"\r\n                    id=\"Email\"\r\n                    label=\"Email\"\r\n                    placeholder=\"test.test@gmail.com\"\r\n                    value={formik.values.Email}\r\n                    onChange={formik.handleChange}\r\n                    multiline\r\n                  />\r\n                  {formik.errors.Email && formik.touched.Email && (\r\n                    <FormHelperText>{formik.errors.Email}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n\r\n                <FormControl\r\n                  className={clsx(\r\n                    classes.margin,\r\n                    classes.withoutLabel,\r\n                    classes.textField\r\n                  )}\r\n                  error={formik.errors.Phone && formik.touched.Phone}\r\n                  component=\"fieldset\"\r\n                >\r\n                  <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                    Phone Number\r\n                  </InputLabel>\r\n                  <Input\r\n                    id=\"Phone\"\r\n                    value={formik.values.Phone}\r\n                    onChange={formik.handleChange}\r\n                    aria-describedby=\"standard-weight-helper-text\"\r\n                    inputProps={{\r\n                      \"aria-label\": \"Phone\",\r\n                    }}\r\n                  />\r\n                  {formik.errors.Phone && formik.touched.Phone && (\r\n                    <FormHelperText>{formik.errors.Phone}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </FormGroup>\r\n\r\n              <div className=\"form-group text_box\">\r\n                <label className=\"f_p text_c f_400\">\r\n                  {\" \"}\r\n                  <strong>Upload your Profile picture : </strong>\r\n                </label>\r\n                <br />\r\n\r\n                <Input\r\n                  id=\"fileinput\"\r\n                  type=\"file\"\r\n                  name=\"img\"\r\n                  onChange={(event) => {\r\n                    formik.setFieldValue(\"img\", event.target.files[0]);\r\n                  }}\r\n                />\r\n                {formik.errors.image && formik.touched.image && (\r\n                  <FormHelperText error={formik.errors.image}>\r\n                    {formik.errors.image}\r\n                  </FormHelperText>\r\n                )}\r\n              </div>\r\n\r\n              <Button\r\n                className=\"m-2\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Update\r\n              </Button>\r\n              <Button\r\n                className=\"m-2\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={Reset}\r\n              >\r\n                Reset\r\n              </Button>\r\n            </form>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst YupSchema = Yup.object({\r\n  FullName: Yup.string().required(\"FullName Name is Required\"),\r\n  Username: Yup.string().required(\"Username is Required\"),\r\n  address: Yup.string().required(\"Address is Required\"),\r\n  Email: Yup.string()\r\n    .email(\"No valid Email \")\r\n    .required(\"email is Required\"),\r\n  Phone: Yup.number(\"Phone Number should be a number\")\r\n    .positive(\"Phone Number should be Positive\")\r\n    .required(\"phone number is Required\"),\r\n});\r\n\r\nexport default UpdatedmForm;\r\n","import React, { Fragment } from \"react\";\r\nimport { PageTitle } from \"../../layout-componentsBack\";\r\nimport { ExampleWrapperSeamless } from \"../../layout-componentsBack\";\r\nimport UpdatedmForm from \"../../components/back/UpdatedmForm\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport default function Updatedm() {\r\n  const { id } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageTitle\r\n        titleHeading=\"Delivery man\"\r\n        titleDescription=\"Wide selection of forms controls, using a standardised code base, specifically for React.\"\r\n      />\r\n      <ExampleWrapperSeamless sectionHeading=\"\">\r\n        <UpdatedmForm id={id} />\r\n      </ExampleWrapperSeamless>\r\n    </Fragment>\r\n  );\r\n}\r\n"],"sourceRoot":""}