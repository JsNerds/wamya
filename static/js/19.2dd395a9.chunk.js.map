{"version":3,"sources":["components/back/UpdatemileForm.js","pages/back/Updatemile.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","YupSchema","Yup","delivs","required","profit","stage","rating","badges","UpdatemileForm","props","classes","history","useHistory","useState","visible","message","error","setError","id","setid","formik","useFormik","initialValues","validationSchema","onSubmit","values","a","console","log","queryServerApi","push","useEffect","res","err","Id","JSON","stringify","errors","setValues","fetchDataForm","Grid","container","item","xs","lg","Card","className","Divider","handleSubmit","FormGroup","isValid","severity","FormControl","touched","component","InputLabel","htmlFor","Input","startAdornment","InputAdornment","position","value","onChange","handleChange","FormHelperText","clsx","variant","alignItems","TextField","fullWidth","label","placeholder","multiline","Button","color","type","onClick","Updatemile","useParams","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/19.2dd395a9.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  Grid,\r\n  Input,\r\n  Card,\r\n  FormControl,\r\n  FormHelperText,\r\n  Divider,\r\n  InputLabel,\r\n  FormGroup,\r\n  InputAdornment,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useFormik } from \"formik\";\r\nimport { useHistory } from \"react-router\";\r\nimport { queryServerApi } from \"../../utils/queryServerApi\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nconst UpdatemileForm = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [error, setError] = useState({ visible: false, message: \"\" });\r\n  const [id, setid] = useState();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      delivs: \"\",\r\n      profit: \"\",\r\n      stage: \"\",\r\n      rating: \"\",\r\n      badges: \"\",\r\n    },\r\n    validationSchema: YupSchema,\r\n    onSubmit: async (values) => {\r\n      console.log(values);\r\n\r\n      const [, err] = await queryServerApi(\r\n        \"deliveryman/updatemile/\" + props.id,\r\n        values,\r\n        \"PUT\",\r\n        false\r\n      );\r\n\r\n      history.push(\"/DeliverymanDetails/\" + id);\r\n    },\r\n  });\r\n\r\n  const Reset = () => {\r\n    async function fetchDataForm() {\r\n      const [res, err] = await queryServerApi(\r\n        \"deliveryman/getmileid/\" + props.id\r\n      );\r\n      setError({\r\n        visible: true,\r\n        message: JSON.stringify(err?.errors, null, 2),\r\n      });\r\n      formik.setValues({\r\n        delivs: res.delivs,\r\n        profit: res.profit,\r\n        stage: res.stage,\r\n        rating: res.rating,\r\n        badges: res.badges,\r\n      });\r\n    }\r\n    fetchDataForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"id child\", props.id);\r\n    async function fetchDataForm() {\r\n      const [res, err] = await queryServerApi(\r\n        \"deliveryman/getmileid/\" + props.id\r\n      );\r\n      setid(res.Id);\r\n      setError({\r\n        visible: true,\r\n        message: JSON.stringify(err?.errors, null, 2),\r\n      });\r\n      formik.setValues({\r\n        delivs: res.delivs,\r\n        profit: res.profit,\r\n        stage: res.stage,\r\n        rating: res.rating,\r\n        badges: res.badges,\r\n      });\r\n    }\r\n    fetchDataForm();\r\n    // eslint-disable-next-line\r\n  }, [props.id]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} lg={6}>\r\n          <Card className=\"p-4 mb-4\">\r\n            <div className=\"font-size-lg font-weight-bold\">Milestones</div>\r\n            <Divider className=\"my-4\" />\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <FormGroup>\r\n                {error.visible && <span>{error.message}</span>}\r\n\r\n                {!formik.isValid && (\r\n                  <MuiAlert className=\"mb-4\" severity=\"error\">\r\n                    <div className=\"d-flex align-items-center align-content-center\">\r\n                      <span>\r\n                        <strong className=\"d-block\">Danger!</strong> Check out\r\n                        the form again\r\n                      </span>\r\n                    </div>\r\n                  </MuiAlert>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <FormControl\r\n                  className=\"w-100 m-2\"\r\n                  error={formik.errors.delivs && formik.touched.delivs}\r\n                  component=\"fieldset\"\r\n                >\r\n                  <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                    Deliveries made\r\n                  </InputLabel>\r\n                  <Input\r\n                    id=\"delivs\"\r\n                    startAdornment={\r\n                      <InputAdornment position=\"start\">\r\n                        <AccountCircle />\r\n                      </InputAdornment>\r\n                    }\r\n                    value={formik.values.delivs}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.delivs && formik.touched.delivs && (\r\n                    <FormHelperText>{formik.errors.delivs}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n                <FormControl\r\n                  className=\"w-100 m-2\"\r\n                  error={formik.errors.profit && formik.touched.profit}\r\n                  component=\"fieldset\"\r\n                >\r\n                  <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                    profit\r\n                  </InputLabel>\r\n                  <Input\r\n                    id=\"profit\"\r\n                    startAdornment={\r\n                      <InputAdornment position=\"start\">\r\n                        <AccountCircle />\r\n                      </InputAdornment>\r\n                    }\r\n                    value={formik.values.profit}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.profit && formik.touched.profit && (\r\n                    <FormHelperText>{formik.errors.profit}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </FormGroup>\r\n\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                error={formik.errors.stage && formik.touched.stage}\r\n                component=\"fieldset\"\r\n              >\r\n                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                  <Grid item>\r\n                    <AccountCircle />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"stage\"\r\n                      label=\"stage\"\r\n                      value={formik.values.stage}\r\n                      onChange={formik.handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {formik.errors.stage && formik.touched.stage && (\r\n                  <FormHelperText>{formik.errors.stage}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                error={formik.errors.rating && formik.touched.rating}\r\n                component=\"fieldset\"\r\n              >\r\n                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                  <Grid item>\r\n                    <AccountCircle />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"rating\"\r\n                      label=\"rating\"\r\n                      value={formik.values.rating}\r\n                      onChange={formik.handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {formik.errors.rating && formik.touched.rating && (\r\n                  <FormHelperText>{formik.errors.rating}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <FormGroup>\r\n                <FormControl\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  error={formik.errors.badges && formik.touched.badges}\r\n                  component=\"fieldset\"\r\n                >\r\n                  <TextField\r\n                    fullWidth\r\n                    className=\"m-2\"\r\n                    id=\"badges\"\r\n                    label=\"badges\"\r\n                    placeholder=\"badges\"\r\n                    value={formik.values.badges}\r\n                    onChange={formik.handleChange}\r\n                    multiline\r\n                  />\r\n                  {formik.errors.badges && formik.touched.badges && (\r\n                    <FormHelperText>{formik.errors.badges}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </FormGroup>\r\n\r\n              <Button\r\n                className=\"m-2\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Update\r\n              </Button>\r\n              <Button\r\n                className=\"m-2\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={Reset}\r\n              >\r\n                Reset\r\n              </Button>\r\n            </form>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst YupSchema = Yup.object({\r\n  delivs: Yup.string().required(\"deliveries is Required\"),\r\n  profit: Yup.string().required(\"profit is Required\"),\r\n  stage: Yup.string().required(\"stage is Required\"),\r\n  rating: Yup.string(\"rating should be a number\"),\r\n  badges: Yup.string().required(\"street is required\"),\r\n});\r\n\r\nexport default UpdatemileForm;\r\n","import React, { Fragment } from \"react\";\r\nimport { PageTitle } from \"../../layout-componentsBack\";\r\nimport { ExampleWrapperSeamless } from \"../../layout-componentsBack\";\r\nimport UpdatemileForm from \"../../components/back/UpdatemileForm\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport default function Updatemile() {\r\n  const { id } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageTitle\r\n        titleHeading=\"Update the milestone\"\r\n        titleDescription=\"Wide selection of forms controls, using a standardised code base, specifically for React.\"\r\n      />\r\n      <ExampleWrapperSeamless sectionHeading=\"\">\r\n        <UpdatemileForm id={id} />\r\n      </ExampleWrapperSeamless>\r\n    </Fragment>\r\n  );\r\n}\r\n"],"sourceRoot":""}