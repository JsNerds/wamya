{"version":3,"sources":["components/back/DeliveryDetails.js","pages/back/Delivery.js"],"names":["DeliveryDetails","props","history","useHistory","MyMarkers","map","useMap","deliv","preparedData","push","L","sourceAddress","Location","Latitude","Longitude","destinationAddress","forEach","el","control","waypoints","lineOptions","styles","color","opacity","weight","addWaypoints","draggableWaypoints","fitSelectedRoutes","showAlternatives","addTo","panTo","Marker","position","Popup","City","Grid","container","spacing","item","xs","sm","md","Card","className","CardContent","package","type","note","dimension","Length","Width","Height","customer","FirstName","LastName","UserName","Email","Tooltip","arrow","title","IconButton","size","variant","onClick","id","_id","replace","icon","driver","Fullname","Username","console","log","mile","Phone","address","lg","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Delivery","useParams","useServerApi","delivery","toRender","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/14.db47b30b.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  LinearProgress,\r\n  Tooltip,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport * as L from \"leaflet\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  // useMapEvents,\r\n  useMap,\r\n} from \"react-leaflet\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport default function DeliveryDetails(props) {\r\n  const history = useHistory();\r\n  const DeliveryManDetails= (id) =>{\r\n    history.replace(\"/DeliverymanDetails/\"+ id)\r\n}\r\nconst CustomerDetails= (id) =>{\r\n  history.replace(\"/CustomerDetails/\"+ id)\r\n}\r\n  const MyMarkers = () => {\r\n    const map = useMap();\r\n\r\n    if (props.deliv) {\r\n      const preparedData = [];\r\n      preparedData.push(\r\n        L.latLng(\r\n          props.deliv?.sourceAddress.Location.Latitude,\r\n          props.deliv?.sourceAddress.Location.Longitude\r\n        )\r\n      );\r\n      props.deliv.destinationAddress.forEach((el) => {\r\n        preparedData.push(\r\n          L.latLng(el.Location.Latitude, el.Location.Longitude)\r\n        );\r\n      });\r\n\r\n      var control = L.Routing.control({\r\n        waypoints: preparedData,\r\n        //router: new L.Routing.Google(),\r\n        lineOptions: {\r\n          styles: [\r\n            {\r\n              color: \"blue\",\r\n              opacity: 0.6,\r\n              weight: 4,\r\n            },\r\n          ],\r\n        },\r\n        addWaypoints: false,\r\n        draggableWaypoints: false,\r\n        fitSelectedRoutes: true,\r\n        showAlternatives: false,\r\n      });\r\n      //L.Routing.Itinerary({ show: false });\r\n      control.addTo(map);\r\n\r\n      map.panTo([\r\n        props.deliv?.sourceAddress.Location.Latitude,\r\n        props.deliv?.sourceAddress.Location.Longitude,\r\n      ]);\r\n      return (\r\n        <>\r\n          <Marker\r\n            position={[\r\n              props.deliv?.sourceAddress.Location.Latitude,\r\n              props.deliv?.sourceAddress.Location.Longitude,\r\n            ]}\r\n          >\r\n            <Popup>\r\n              <span>start : {props.deliv?.sourceAddress.City}</span>\r\n            </Popup>\r\n          </Marker>\r\n        </>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card className=\"mb-4\">\r\n            <CardContent className=\"p-3\">\r\n              <h5 className=\"card-title font-weight-bold font-size-lg\">\r\n                Package\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                <strong>type :</strong> {props.deliv?.package[0].type}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                <strong>Note :</strong> {props.deliv?.package[0].note}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                {\" \"}\r\n                <strong>Weight :</strong> {props.deliv?.package[0].weight}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                <strong>Length :</strong>{\" \"}\r\n                {props.deliv?.package[0].dimension.Length} <span />\r\n                <strong>Width :</strong>{\" \"}\r\n                {props.deliv?.package[0].dimension.Width}\r\n                <span />\r\n                <strong>Height :</strong>{\" \"}\r\n                {props.deliv?.package[0].dimension.Height}\r\n                <span />\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card className=\"mb-4\">\r\n            <CardContent className=\"p-3\">\r\n              <h5 className=\"card-title font-weight-bold font-size-lg\">\r\n                {\" \"}\r\n                Customer\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                <strong>Full name :</strong> {props.deliv?.customer.FirstName}{\" \"}\r\n                {props.deliv?.customer.LastName}\r\n              </p>\r\n\r\n              <p className=\"card-text\">\r\n                <strong>Username :</strong> {props.deliv?.customer.UserName}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                <strong>Email :</strong> {props.deliv?.customer.Email}\r\n              </p>\r\n              <Tooltip arrow title=\"View Details\">\r\n                <IconButton\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    CustomerDetails(props.deliv?.customer._id);\r\n                  }}\r\n                >\r\n                  <FontAwesomeIcon icon={[\"fas\", \"arrow-right\"]} />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card className=\"mb-4\">\r\n            <CardContent className=\"p-3\">\r\n              <h5 className=\"card-title font-weight-bold font-size-lg\">\r\n                {props.deliv?.driver.Fullname}\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                <strong>Username : </strong> {props.deliv?.driver.Username}\r\n                {console.log(props.mile)}\r\n                {console.log(props.deliv?.driver)}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                <strong>Email : </strong> {props.deliv?.driver.Email}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                <strong>Phone Number : </strong> {props.deliv?.driver.Phone}\r\n              </p>\r\n              <p className=\"card-text\">\r\n                <strong>Address : </strong> {props.deliv?.driver.address}\r\n              </p>\r\n              <Tooltip arrow title=\"View Details\">\r\n                <IconButton\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    DeliveryManDetails(props.deliv?.driver._id);\r\n                  }}\r\n                >\r\n                  <FontAwesomeIcon icon={[\"fas\", \"arrow-right\"]} />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} lg={12}>\r\n          <MapContainer center={[0, 0]} zoom={13} scrollWheelZoom={true}>\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <MyMarkers />\r\n          </MapContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport {ExampleWrapperSeamless, PageTitle} from '../../layout-componentsBack';\r\nimport DeliveryDetails from \"../../components/back/DeliveryDetails\";\r\nimport {useServerApi} from '../../hooks/useServerApi';\r\n\r\nexport default function Delivery() {\r\n    const {id} = useParams();\r\n    const [delivery, err, reload] = useServerApi(\"delivery/\"+id);\r\n    const toRender = delivery;\r\n    return (\r\n        <Fragment>\r\n            <PageTitle\r\n                titleHeading=\"Delivery Details\"\r\n                titleDescription=\"this is the details of the delivery\"\r\n            />\r\n            <ExampleWrapperSeamless sectionHeading=\"Delivery\">\r\n            {toRender ?\r\n              (   <>\r\n                    <DeliveryDetails deliv={toRender}/>\r\n                  </>\r\n              ) : (<p>Delivery not found</p>)}\r\n                \r\n            </ExampleWrapperSeamless>\r\n        </Fragment>\r\n    );\r\n}\r\n"],"sourceRoot":""}