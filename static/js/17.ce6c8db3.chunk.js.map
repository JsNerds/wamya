{"version":3,"sources":["components/back/UpdateCustomerForm.js","pages/back/UpdateCustomer.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","YupSchema","Yup","firstname","required","username","lastname","email","phoneNumber","positive","street","city","zipCode","UpdateCustomerForm","props","classes","history","useHistory","useState","visible","message","error","setError","formik","useFormik","initialValues","cin","validationSchema","onSubmit","values","a","console","log","queryServerApi","id","err","JSON","stringify","errors","push","useEffect","res","setValues","Cin","FirstName","LastName","UserName","Email","PhoneNumber","Adress","Street","City","ZipCode","fetchDataForm","Grid","container","item","xs","lg","Card","className","Divider","handleSubmit","FormGroup","isValid","severity","InputLabel","FormControl","clsx","variant","FilledInput","value","onChange","handleChange","aria-describedby","type","disabled","inputProps","FormHelperText","touched","component","htmlFor","Input","startAdornment","InputAdornment","position","alignItems","TextField","fullWidth","label","placeholder","multiline","name","event","setFieldValue","target","files","image","OutlinedInput","labelWidth","Button","color","onClick","UpdateCustomer","useParams","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/17.ce6c8db3.chunk.js","sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\r\nimport * as Yup from \"yup\";\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport {\r\n    Grid,\r\n    Input,\r\n    Card,\r\n    FormControl,\r\n    FormHelperText,\r\n    Divider,\r\n    InputLabel,\r\n    FormGroup,\r\n    InputAdornment,\r\n    TextField,\r\n    Button\r\n\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport {useFormik} from \"formik\";\r\nimport {useHistory} from \"react-router\";\r\nimport {queryServerApi} from \"../../utils/queryServerApi\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst UpdateCustomerForm = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [error,setError] = useState({visible: false,message: \"\"});\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            cin: 0,\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            username: \"\",\r\n            email: \"\",\r\n            phoneNumber: 0,\r\n            street: \"\",\r\n            city: \"\",\r\n            zipCode: 0\r\n        },\r\n        validationSchema:YupSchema,\r\n        onSubmit: async (values) =>{\r\n            console.log(values);\r\n            const [,err] = await queryServerApi(\"customers/update/\" +props.id, values,\"PUT\",true);\r\n            if(err){\r\n                setError({\r\n                    visible: true,\r\n                    message: JSON.stringify(err.errors, null, 2),\r\n                });\r\n            }\r\n            else history.push(\"/Customers\")\r\n        }\r\n    });\r\n\r\n    const Reset= ()=>{\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"customers/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                cin: res.Cin,\r\n                firstname: res.FirstName,\r\n                lastname: res.LastName,\r\n                username: res.UserName,\r\n                email: res.Email,\r\n                phoneNumber: res.PhoneNumber,\r\n                street: res.Adress.Street,\r\n                city: res.Adress.City,\r\n                zipCode: res.Adress.ZipCode\r\n            });\r\n        }\r\n        fetchDataForm();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"id child\",props.id)\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"customers/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                cin: res.Cin,\r\n                firstname: res.FirstName,\r\n                lastname: res.LastName,\r\n                username: res.UserName,\r\n                email: res.Email,\r\n                phoneNumber: res.PhoneNumber,\r\n                street: res.Adress.Street,\r\n                city: res.Adress.City,\r\n                zipCode: res.Adress.ZipCode\r\n            });\r\n        }\r\n        fetchDataForm();\r\n        // eslint-disable-next-line\r\n    },[props.id]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12} lg={6}>\r\n                    <Card className=\"p-4 mb-4\">\r\n                        <div className=\"font-size-lg font-weight-bold\">Customer</div>\r\n                        <Divider className=\"my-4\" />\r\n\r\n                        <form onSubmit={formik.handleSubmit}>\r\n\r\n\r\n                            <FormGroup>\r\n                                {error.visible && <span>{error.message}</span>}\r\n\r\n                                {!formik.isValid &&\r\n                                <MuiAlert className=\"mb-4\" severity=\"error\">\r\n                                    <div className=\"d-flex align-items-center align-content-center\">\r\n                                         <span>\r\n                                         <strong className=\"d-block\">Danger!</strong> Check out the form again\r\n                                         </span>\r\n                                    </div>\r\n                                </MuiAlert>}\r\n\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <InputLabel>Informations</InputLabel>\r\n\r\n                                <FormControl\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    variant=\"filled\">\r\n                                    <FilledInput\r\n                                        id=\"cin\"\r\n                                        value={formik.values.cin}\r\n                                        onChange={formik.handleChange}\r\n                                        aria-describedby=\"filled-weight-helper-text\"\r\n                                        type=\"number\"\r\n                                        disabled=\"true\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'cin'\r\n                                        }}\r\n                                    />\r\n                                    <FormHelperText id=\"filled-weight-helper-text\">\r\n                                        CIN\r\n                                    </FormHelperText>\r\n                                </FormControl>\r\n\r\n\r\n                                <FormControl className=\"w-100 m-2\"\r\n                                             error={formik.errors.username && formik.touched.username} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                       Username\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"username\"\r\n                                        startAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        value={formik.values.username}\r\n                                        onChange={formik.handleChange}\r\n                                    />\r\n                                    {formik.errors.username && formik.touched.username && (\r\n                                        <FormHelperText>{formik.errors.username}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n\r\n                            </FormGroup>\r\n\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                 error={formik.errors.firstname && formik.touched.firstname} component=\"fieldset\">\r\n                                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"firstname\"\r\n                                            label=\"First Name\"\r\n                                            value={formik.values.firstname}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.firstname && formik.touched.firstname && (\r\n                                    <FormHelperText>{formik.errors.firstname}</FormHelperText>\r\n                                )}\r\n\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.lastname && formik.touched.lastname} component=\"fieldset\">\r\n\r\n                            <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"lastname\"\r\n                                            label=\"Last name\"\r\n                                            value={formik.values.lastname}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.lastname && formik.touched.lastname && (\r\n                                    <FormHelperText>{formik.errors.lastname}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n\r\n                            <FormGroup>\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.email && formik.touched.email} component=\"fieldset\">\r\n\r\n                            <TextField\r\n                                    fullWidth\r\n                                    className=\"m-2\"\r\n                                    id=\"email\"\r\n                                    label=\"Email\"\r\n                                    placeholder=\"test.test@gmail.com\"\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    multiline\r\n                                />\r\n                                {formik.errors.email && formik.touched.email && (\r\n                                    <FormHelperText>{formik.errors.email}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n                                <FormControl\r\n                                    className={clsx(\r\n                                        classes.margin,\r\n                                        classes.withoutLabel,\r\n                                        classes.textField\r\n                                    )}\r\n                                    error={formik.errors.phoneNumber && formik.touched.phoneNumber} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                        Phone Number\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"phoneNumber\"\r\n                                        value={formik.values.phoneNumber}\r\n                                        onChange={formik.handleChange}\r\n\r\n                                        aria-describedby=\"standard-weight-helper-text\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'phoneNumber'\r\n                                        }}\r\n                                    />\r\n                                    {formik.errors.phoneNumber && formik.touched.phoneNumber && (\r\n                                        <FormHelperText>{formik.errors.phoneNumber}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n                            </FormGroup>\r\n\r\n\r\n                            <div className=\"form-group text_box\">\r\n                                <label className=\"f_p text_c f_400\"> <strong>Upload your Profile picture : </strong></label><br/>\r\n\r\n                                <Input\r\n                                    id=\"fileinput\"\r\n                                    type=\"file\"\r\n                                    name=\"img\"\r\n                                    onChange={(event) => {\r\n                                        formik.setFieldValue(\"img\", event.target.files[0]);\r\n                                    }}/>\r\n                                {formik.errors.image && formik.touched.image && (\r\n                                    <FormHelperText error={formik.errors.image}>{formik.errors.image}</FormHelperText>\r\n                                )}\r\n                            </div>\r\n\r\n\r\n                            <p></p>\r\n                            <InputLabel>Address</InputLabel>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.street && formik.touched.street} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"street\"\r\n                                    value={formik.values.street}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'street'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Street\r\n                                </FormHelperText>\r\n                                {formik.errors.street && formik.touched.street && (\r\n                                    <FormHelperText>{formik.errors.street}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.city && formik.touched.city} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"city\"\r\n                                    value={formik.values.city}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'city'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    City\r\n                                </FormHelperText>\r\n                                {formik.errors.city && formik.touched.city && (\r\n                                    <FormHelperText>{formik.errors.city}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.zipCode && formik.touched.zipCode} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"zipCode\"\r\n                                    value={formik.values.zipCode}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'zipCode'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Zip Code\r\n                                </FormHelperText>\r\n                                {formik.errors.zipCode && formik.touched.zipCode && (\r\n                                    <FormHelperText>{formik.errors.zipCode}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n                            <p></p>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Update\r\n                            </Button>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"secondary\" onClick={Reset}>\r\n                                Reset\r\n                            </Button>\r\n\r\n                        </form>\r\n\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    textField: {\r\n        width: 200\r\n    }\r\n}));\r\n\r\nconst YupSchema = Yup.object ({\r\n    firstname: Yup.string()\r\n        .required(\"First Name is Required\"),\r\n    username: Yup.string()\r\n        .required(\"Username is Required\"),\r\n    lastname: Yup.string()\r\n        .required(\"Last Name is Required\"),\r\n    email: Yup.string()\r\n        .email(\"No valid Email \")\r\n        .required(\"email is Required\"),\r\n    phoneNumber: Yup.number(\"Phone Number should be a number\")\r\n        .positive(\"Phone Number should be Positive\")\r\n        .required(\"phone number is Required\"),\r\n    street: Yup.string()\r\n        .required(\"street is required\"),\r\n    city: Yup.string()\r\n        .required(\"city is required\"),\r\n    zipCode: Yup.number(\"Zip Code should be a number\")\r\n        .positive(\"Zip Code should be Positive\")\r\n        .required(\"Zip Code is Required\")\r\n});\r\n\r\nexport default UpdateCustomerForm;\r\n","import React, {Fragment} from 'react';\r\nimport { PageTitle } from '../../layout-componentsBack';\r\nimport { ExampleWrapperSeamless } from '../../layout-componentsBack';\r\nimport UpdateCustomerForm from \"../../components/back/UpdateCustomerForm\";\r\nimport {useParams} from \"react-router\";\r\n\r\n\r\n\r\nexport default function UpdateCustomer() {\r\n    const { id } = useParams();\r\n\r\n    return (\r\n        <Fragment>\r\n            <PageTitle\r\n                titleHeading=\"Update Customer\"\r\n                titleDescription=\"Wide selection of forms controls, using a standardised code base, specifically for React.\"\r\n            />\r\n            <ExampleWrapperSeamless sectionHeading=\"\">\r\n                <UpdateCustomerForm id={id}/>\r\n            </ExampleWrapperSeamless>\r\n        </Fragment>\r\n    );\r\n}\r\n"],"sourceRoot":""}