{"version":3,"sources":["components/back/UpdateCompanyForm.js","pages/back/UpdateCompany.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","YupSchema","Yup","Street","required","City","ZipCode","positive","ResponsibleCin","ResponsibleName","CommercialName","Activity","RegisterStatus","RegionalOffice","Denomination","TaxSituation","Email","email","PhoneNumber","UpdateCompanyForm","props","classes","history","useHistory","useState","visible","message","error","setError","formik","useFormik","initialValues","CreationYear","validationSchema","onSubmit","values","a","console","log","queryServerApi","id","err","JSON","stringify","errors","push","useEffect","res","setValues","HeadquartersAddress","fetchDataForm","Grid","container","item","xs","lg","Card","className","Divider","handleSubmit","FormGroup","isValid","severity","InputLabel","FormControl","clsx","variant","FilledInput","value","onChange","handleChange","aria-describedby","type","inputProps","FormHelperText","touched","component","htmlFor","Input","startAdornment","InputAdornment","position","ResponsibleNames","alignItems","TextField","fullWidth","label","placeholder","multiline","OutlinedInput","labelWidth","street","Button","color","onClick","UpdateCompany","useParams","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/16.e717c602.chunk.js","sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\r\nimport * as Yup from \"yup\";\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport {\r\n    Grid,\r\n    Input,\r\n    Card,\r\n    FormControl,\r\n    FormHelperText,\r\n    Divider,\r\n    InputLabel,\r\n    FormGroup,\r\n    InputAdornment,\r\n    TextField,\r\n    Button\r\n\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport {useFormik} from \"formik\";\r\nimport {useHistory} from \"react-router\";\r\nimport {queryServerApi} from \"../../utils/queryServerApi\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport FilledInput from \"@material-ui/core/FilledInput\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst UpdateCompanyForm = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [error,setError] = useState({visible: false,message: \"\"});\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            ResponsibleCin: \"\",\r\n            ResponsibleName: \"\",\r\n            CreationYear: \"\",\r\n            CommercialName: \"\",\r\n            Activity: \"\",\r\n            Street: \"\",\r\n            City: \"\",\r\n            ZipCode: \"\",\r\n            RegisterStatus: \"\",\r\n            RegionalOffice: \"\",\r\n            Denomination: \"\",\r\n            TaxSituation: \"\",\r\n            Email: \"\",\r\n            PhoneNumber: \"\"\r\n        },validationSchema:YupSchema,\r\n        onSubmit: async (values) =>{\r\n            console.log(values);\r\n            const [,err] = await queryServerApi(\"entreprises/update/\" +props.id, values,\"PUT\",false);\r\n            if(err){\r\n                setError({\r\n                    visible: true,\r\n                    message: JSON.stringify(err.errors, null, 2),\r\n                });\r\n            }\r\n            else history.push(\"/Entreprises\")\r\n        }\r\n    });\r\n\r\n    const Reset= ()=>{\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"entreprises/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                ResponsibleCin: res.ResponsibleCin,\r\n                ResponsibleName: res.ResponsibleName,\r\n                CreationYear: res.CreationYear,\r\n                CommercialName: res.CommercialName,\r\n                Activity: res.Activity,\r\n                Street: res.HeadquartersAddress.Street,\r\n                City: res.HeadquartersAddress.City,\r\n                ZipCode: res.HeadquartersAddress.ZipCode,\r\n                RegisterStatus: res.RegisterStatus,\r\n                RegionalOffice: res.RegionalOffice,\r\n                Denomination: res.Denomination,\r\n                TaxSituation: res.TaxSituation,\r\n                Email: res.Email,\r\n                PhoneNumber: res.PhoneNumber\r\n            });\r\n        }\r\n        fetchDataForm();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"id child\",props.id)\r\n        async function fetchDataForm() {\r\n            const [res, err] = await queryServerApi(\"entreprises/\"+ props.id);\r\n            setError({\r\n                visible: true,\r\n                message: JSON.stringify(err?.errors, null, 2),\r\n            });\r\n            formik.setValues({\r\n                ResponsibleCin: res.ResponsibleCin,\r\n                ResponsibleName: res.ResponsibleName,\r\n                CreationYear: res.CreationYear,\r\n                CommercialName: res.CommercialName,\r\n                Activity: res.Activity,\r\n                Street: res.HeadquartersAddress.Street,\r\n                City: res.HeadquartersAddress.City,\r\n                ZipCode: res.HeadquartersAddress.ZipCode,\r\n                RegisterStatus: res.RegisterStatus,\r\n                RegionalOffice: res.RegionalOffice,\r\n                Denomination: res.Denomination,\r\n                TaxSituation: res.TaxSituation,\r\n                Email: res.Email,\r\n                PhoneNumber: res.PhoneNumber\r\n            });\r\n        }\r\n        fetchDataForm();\r\n        // eslint-disable-next-line\r\n    },[props.id]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12} lg={6}>\r\n                    <Card className=\"p-4 mb-4\">\r\n                        <div className=\"font-size-lg font-weight-bold\">Company</div>\r\n                        <Divider className=\"my-4\" />\r\n\r\n                        <form onSubmit={formik.handleSubmit}>\r\n\r\n\r\n                            <FormGroup>\r\n                                {error.visible && <span>{error.message}</span>}\r\n\r\n                                {!formik.isValid &&\r\n                                <MuiAlert className=\"mb-4\" severity=\"error\">\r\n                                    <div className=\"d-flex align-items-center align-content-center\">\r\n                                         <span>\r\n                                         <strong className=\"d-block\">Danger!</strong> Check out the form again\r\n                                         </span>\r\n                                    </div>\r\n                                </MuiAlert>}\r\n\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <InputLabel>Informations</InputLabel>\r\n\r\n                                <FormControl\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    variant=\"filled\">\r\n                                    <FilledInput\r\n                                        id=\"ResponsibleCin\"\r\n                                        value={formik.values.ResponsibleCin}\r\n                                        onChange={formik.handleChange}\r\n                                        aria-describedby=\"filled-weight-helper-text\"\r\n                                        type=\"number\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'cin'\r\n                                        }}\r\n                                    />\r\n                                    <FormHelperText id=\"filled-weight-helper-text\">\r\n                                        Responsible CIN\r\n                                    </FormHelperText>\r\n                                </FormControl>\r\n\r\n\r\n                                <FormControl className=\"w-100 m-2\"\r\n                                             error={formik.errors.ResponsibleName && formik.touched.ResponsibleName} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                        Responsible Name\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"ResponsibleName\"\r\n                                        startAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        value={formik.values.ResponsibleName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.errors.ResponsibleName && formik.touched.ResponsibleName}\r\n                                    />\r\n                                    {formik.errors.ResponsibleName && formik.touched.ResponsibleName && (\r\n                                        <FormHelperText>{formik.errors.ResponsibleNames}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n\r\n                            </FormGroup>\r\n\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                 error={formik.errors.Denomination && formik.touched.Denomination} component=\"fieldset\">\r\n                                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"Denomination\"\r\n                                            label=\"Denomination\"\r\n                                            value={formik.values.Denomination}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.Denomination && formik.touched.Denomination && (\r\n                                    <FormHelperText>{formik.errors.Denomination}</FormHelperText>\r\n                                )}\r\n\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.CommercialName && formik.touched.CommercialName} component=\"fieldset\">\r\n\r\n                            <Grid container spacing={1} alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <AccountCircle />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"CommercialName\"\r\n                                            label=\"Commercial Name\"\r\n                                            value={formik.values.CommercialName}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {formik.errors.CommercialName && formik.touched.CommercialName && (\r\n                                    <FormHelperText>{formik.errors.CommercialName}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n\r\n                            <FormGroup>\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.Email && formik.touched.Email} component=\"fieldset\">\r\n\r\n                            <TextField\r\n                                    fullWidth\r\n                                    className=\"m-2\"\r\n                                    id=\"Email\"\r\n                                    label=\"Email\"\r\n                                    placeholder=\"test.test@gmail.com\"\r\n                                    value={formik.values.Email}\r\n                                    onChange={formik.handleChange}\r\n                                    multiline\r\n                                />\r\n                                {formik.errors.Email && formik.touched.Email && (\r\n                                    <FormHelperText>{formik.errors.Email}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n                                <FormControl\r\n                                    className={clsx(\r\n                                        classes.margin,\r\n                                        classes.withoutLabel,\r\n                                        classes.textField\r\n                                    )}\r\n                                    error={formik.errors.PhoneNumber && formik.touched.PhoneNumber} component=\"fieldset\">\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">\r\n                                        Phone Number\r\n                                    </InputLabel>\r\n                                    <Input\r\n                                        id=\"PhoneNumber\"\r\n                                        value={formik.values.PhoneNumber}\r\n                                        onChange={formik.handleChange}\r\n\r\n                                        aria-describedby=\"standard-weight-helper-text\"\r\n                                        inputProps={{\r\n                                            'aria-label': 'PhoneNumber'\r\n                                        }}\r\n                                    />\r\n                                    {formik.errors.PhoneNumber && formik.touched.PhoneNumber && (\r\n                                        <FormHelperText>{formik.errors.PhoneNumber}</FormHelperText>\r\n                                    )}\r\n                                </FormControl>\r\n                            </FormGroup>\r\n\r\n\r\n\r\n                            <p></p>\r\n                            <InputLabel>Other Details</InputLabel>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.CreationYear && formik.touched.CreationYear} component=\"fieldset\">\r\n\r\n                                <input\r\n                                    id=\"street\"\r\n                                    type=\"date\"\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Creation year\r\n                                </FormHelperText>\r\n                                {formik.errors.CreationYear && formik.touched.CreationYear && (\r\n                                    <FormHelperText>{formik.errors.CreationYear}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.Activity && formik.touched.Activity} component=\"fieldset\">\r\n\r\n                                <OutlinedInput\r\n                                    id=\"city\"\r\n                                    value={formik.values.Activity}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'Activity'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Activity\r\n                                </FormHelperText>\r\n                                {formik.errors.Activity && formik.touched.Activity && (\r\n                                    <FormHelperText>{formik.errors.Activity}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.TaxSituation && formik.touched.TaxSituation} component=\"fieldset\">\r\n\r\n                                <OutlinedInput\r\n                                    id=\"TaxSituation\"\r\n                                    value={formik.values.TaxSituation}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'TaxSituation'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Tax Situation\r\n                                </FormHelperText>\r\n                                {formik.errors.TaxSituation && formik.touched.TaxSituation && (\r\n                                    <FormHelperText>{formik.errors.RegionalOffice}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.RegisterStatus && formik.touched.RegisterStatus} component=\"fieldset\">\r\n\r\n                                <OutlinedInput\r\n                                    id=\"RegisterStatus\"\r\n                                    value={formik.values.RegisterStatus}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'RegisterStatus'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Register Status\r\n                                </FormHelperText>\r\n                                {formik.errors.RegisterStatus && formik.touched.RegisterStatus && (\r\n                                    <FormHelperText>{formik.errors.RegisterStatus}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n\r\n                            <p></p>\r\n                            <InputLabel>Address</InputLabel>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.Street && formik.touched.Street} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"Street\"\r\n                                    value={formik.values.Street}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'Street'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Street\r\n                                </FormHelperText>\r\n                                {formik.errors.Street && formik.touched.Street && (\r\n                                    <FormHelperText>{formik.errors.street}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.City && formik.touched.City} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"City\"\r\n                                    value={formik.values.City}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'City'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    City\r\n                                </FormHelperText>\r\n                                {formik.errors.City && formik.touched.City && (\r\n                                    <FormHelperText>{formik.errors.City}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.RegionalOffice && formik.touched.RegionalOffice} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"RegionalOffice\"\r\n                                    value={formik.values.RegionalOffice}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'zipCode'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Regional Office\r\n                                </FormHelperText>\r\n                                {formik.errors.RegionalOffice && formik.touched.RegionalOffice && (\r\n                                    <FormHelperText>{formik.errors.RegionalOffice}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <FormControl\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                variant=\"outlined\"\r\n                                error={formik.errors.ZipCode && formik.touched.ZipCode} component=\"fieldset\">\r\n\r\n                            <OutlinedInput\r\n                                    id=\"ZipCode\"\r\n                                    value={formik.values.ZipCode}\r\n                                    aria-describedby=\"outlined-weight-helper-text\"\r\n                                    inputProps={{\r\n                                        'aria-label': 'zipCode'\r\n                                    }}\r\n                                    labelWidth={0}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <FormHelperText id=\"outlined-weight-helper-text\">\r\n                                    Zip Code\r\n                                </FormHelperText>\r\n                                {formik.errors.ZipCode && formik.touched.ZipCode && (\r\n                                    <FormHelperText>{formik.errors.ZipCode}</FormHelperText>\r\n                                )}\r\n                            </FormControl>\r\n                            <p></p>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Update\r\n                            </Button>\r\n                            <Button className=\"m-2\" variant=\"contained\" color=\"secondary\" onClick={Reset}>\r\n                                Reset\r\n                            </Button>\r\n\r\n                        </form>\r\n\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    textField: {\r\n        width: 200\r\n    }\r\n}));\r\n\r\nconst YupSchema = Yup.object ({\r\n    Street: Yup.string()\r\n        .required(\"street is required\"),\r\n    City: Yup.string()\r\n        .required(\"city is required\"),\r\n    ZipCode: Yup.number(\"Zip Code should be a number\")\r\n        .positive(\"Zip Code should be Positive\")\r\n        .required(\"Zip Code is Required\"),\r\n    ResponsibleCin: Yup.number(\"ResponsibleCin should be a number\")\r\n    .positive(\"ResponsibleCin should be Positive\")\r\n    .required(\"ResponsibleCin is Required\"),\r\n    ResponsibleName: Yup.string()\r\n        .required(\"Responsibl eName is required\"),\r\n    CommercialName: Yup.string()\r\n        .required(\"Commercial Name is required\"),\r\n    Activity: Yup.string()\r\n        .required(\"Activity is required\"),\r\n    RegisterStatus:Yup.string()\r\n        .required(\"Register Status is required\"),\r\n    RegionalOffice: Yup.string()\r\n        .required(\"Regional Office is required\"),\r\n    Denomination: Yup.string()\r\n        .required(\"Denomination is required\"),\r\n    TaxSituation: Yup.string()\r\n        .required(\"TaxSituation is required\"),\r\n    Email: Yup.string()\r\n        .email(\"No valid Email \")\r\n        .required(\"email is Required\"),\r\n    PhoneNumber: Yup.number(\"Phone Number should be a number\")\r\n        .positive(\"Phone Number should be Positive\")\r\n        .required(\"phone number is Required\"),\r\n});\r\n\r\nexport default UpdateCompanyForm;\r\n","import React, {Fragment} from 'react';\r\nimport { PageTitle } from '../../layout-componentsBack';\r\nimport { ExampleWrapperSeamless } from '../../layout-componentsBack';\r\nimport {useParams} from \"react-router\";\r\nimport UpdateCompanyForm from \"../../components/back/UpdateCompanyForm\";\r\n\r\n\r\n\r\nexport default function UpdateCompany() {\r\n    const { id } = useParams();\r\n\r\n    return (\r\n        <Fragment>\r\n            <PageTitle\r\n                titleHeading=\"Update Customer\"\r\n                titleDescription=\"Wide selection of forms controls, using a standardised code base, specifically for React.\"\r\n            />\r\n            <ExampleWrapperSeamless sectionHeading=\"\">\r\n                <UpdateCompanyForm id={id}/>\r\n            </ExampleWrapperSeamless>\r\n        </Fragment>\r\n    );\r\n}\r\n"],"sourceRoot":""}